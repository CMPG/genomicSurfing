// RANGE EXPANSION - trials of October 2020
// set up
initialize() {
	// starting the clock
	defineConstant("start", clock());
	
	/* 
	// command line constants to use in SLiM GUI if needed to debug
	
	// chromosome size
	defineConstant("chrL", 100000000);
	
	// mutation rate
	defineConstant("mu", 1.25e-8);
	
	// recombination rate
	defineConstant("rho", 1e-8);
	
	// number of core demes
	defineConstant("core", 5);

	// number of edge demes
	defineConstant("edge", 5);

	// this is the carrying capacity
	defineConstant("maxN", 100);

	//this is the migration rate to be used throughout the simulation. It should be the same for everything (core demes and wave demes)
	defineConstant("migr", 0.1);

	// number of generations needed to reach carrying capacity (maxN)
	defineConstant("tgrw", 5);

	// growth constant
	defineConstant("r1", 0.35);
	
	// growth factor (exp(r*t), for t=1)
	defineConstant("ert1", 1.80);

	// burn-in period in generations, before expansion starts
	defineConstant("burnin", 500);


    // defineConstant("GridSize", 9);
	//this should be the number of deme in each size od the grid 
	//(eg. if grid = 9, side = 3 (because 3*3 =9, and the grid is simetrical))
	// defineConstant("GridSide", 3);

	defineConstant("replicate", 1);

    defineConstant("out", "/Users/flaschli/Dropbox/SLiM_results/vcf_files");
	
	defineConstant("Fndrs", 20);
	
	defineConstant("out_mut_path", "/Users/flaschli/Dropbox/SLiM_results/muts");
	
	defineConstant("out_pop_path", "/Users/flaschli/Dropbox/SLiM_results/popsizes");

*/
////////<-------------------------------------------------


	// chromosome size
	defineConstant("L", chrL);

	//the burn-in time
	defineConstant("burn", burnin);
	

	//time to reach saturation is tg generations
	defineConstant("tg", tgrw);
	defineConstant("t1", 1);

	// growth component (e^r1*t) (== exp(r1*t))
	defineConstant("er1", ert1);

	// MUTATION and RECOMBINATION
	initializeMutationRate(mu);
	initializeRecombinationRate(rho);

	defineConstant("rep", replicate);

	defineConstant("out_path", out);
	
	defineConstant("founders", Fndrs);

	defineConstant("out_mut_path", out_mut);
	defineConstant("out_pop_path", out_pop);
	defineConstant("burnin_path", burn_pop);

    // ----------------> Re-running simulations --------------------------->
    defineConstant("num_samples", nsamps);

    // <---------------- end for Re-running simulations <---------------------------

	// neutral mutations
	initializeMutationType("m1", 0.0, "f", 0);
	m1.convertToSubstitution = T;
	m1.mutationStackPolicy = "l";
	m1.color = "red";

	// genomic elements
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, (L-1));
	
	initializeTreeSeq();
}

function (o<Subpopulation>)SWI(integer $id)
{
	subpops = sim.subpopulations;
	subpop = subpops[subpops.id == id];
	if (subpop.length() != 1)
		stop("Lookup of subpop with index " + id + " failed.");
	return subpop;
}



// block s1: Used to open treeSeq file with core pop burn-in
s1 1 late () {

	// done to select a correct treeSeq file to start sims (burn in)
	// burn in replicate number: 
	// 								  1 - 200: 1e-8
	//		 						201 - 400: 1e-9
	//		 						401 - 600: 1e-7

	if (rho == 1e-8){
		if (rep > 100 & rep <= 200 ){
			rep_file=(rep-100);
		} else{
			rep_file=rep;
		}
	} else if (rho == 1e-9){
		if (rep > 100){
			rep_file=(rep+200);
		} else if (rep <= 100){
			rep_file=(rep+300);
		}
	} else if (rho == 1e-7){
		if (rep > 100){
			rep_file=(rep+400);
		} else if (rep <= 100){
			rep_file=(rep+500);
		}
	} else {
		catn(asString("Wrong value of Recombination Rate (rho) to determnine correct burn-in file replicate number. Simulation Interrupted"));
		sim.simulationFinished();
	}


	cat("------------------------- \n");
	cat("sim_rep: " + rep + "\n");
	cat("burn_rep: " + rep_file + "\n");
	cat("burn - 1 : " + (burn -1) + "\n");
    cat("------------------------- \n");
	catn(asString("../" + burnin_path + "/out_" + "burnin_1D_c" + (core) + "_g" + (burn-1) + "_r" + rep_file + ".trees"));
    sim.readFromPopulationFile(asString("../" + burnin_path + "/out_" + "burnin_1D_c" + (core) + "_g" + (burn-1) + "_r" + rep_file + ".trees"));
	cat("Finished loading burn-in tree file \n");
}


//END OF BURN-IN PHASE
// generation number is added with sed command after loading parameter file
// s4 block: creates new deme at the correct time, with the num. of founders and they come from previous deme
s4 _burn_in_: early () {
	
	if ((sim.generation % tg) == 0){
//	if generation is divisible by the growth interval...
//	add a new deme and colonize it from the previous deme

//	j is the pop id number of the new deme to be created
//	(((How many generations that have passed)/growth interval) + num. core demes + 1)
		j = asInteger(((sim.generation-burn-100)/tg)+core+1);
		
		newPop = paste0("sim.addSubpop('p" +  j + "', founders);");
		executeLambda(newPop);


        SWI(j).setMigrationRates(SWI(j-1), 1);
        sim.subpopulations.individuals.color="yellow";
	    sim.subpopulations.individuals[sim.subpopulations.individuals.migrant].color="blue";

	}
}

// block s5: set values to control sampling time; 
s5 _burn_in_: late (){
	
	if (sim.generation % tg == 0){
		if (tg == 5){
			sim.setValue("gen_to_samp", sim.generation);
			sim.setValue("gen_plus_four", (sim.getValue("gen_to_samp")+4));
			sim.setValue("gen_plus_two", (sim.getValue("gen_to_samp")+2));
		} else {
			// alternative growth time was 10; 
			// thus sampling at the middle would be at: gen.it.was.created + 6,
			// and in the end: gen.it.was.created + 9
			end=9;
			mid=6;
			sim.setValue("gen_to_samp", sim.generation);
			sim.setValue("gen_plus_four", (sim.getValue("gen_to_samp")+end));
			sim.setValue("gen_plus_two", (sim.getValue("gen_to_samp")+mid));			
		}
	
	}


	if (sim.generation % tg == 0){
		// id number of the created new deme
		j = asInteger(((sim.generation-burn-100)/tg)+core+1);

		// set migration for next the generations between old edge and new edge deme
        SWI(j-1).setMigrationRates(SWI(j), migr);
        SWI(j).setMigrationRates(SWI(j-1), migr);

		// record in sims memory, even after generation is over, new variables:
		// generation new deme was created
		// pop id of new deme
		sim.setValue("ini", sim.generation);
		sim.setValue("ppk", j);

		// only for SLiM gui USE
        sim.subpopulations.individuals.color="yellow";
	    sim.subpopulations.individuals[sim.subpopulations.individuals.migrant].color="blue";
	}
}



s6 _other_gens_: late(){

	// Whenever it is NOT time to create a new deme:

	// Sample VCF 4 generations after the deme creation
	x2=sim.getValue("gen_plus_four");
	if (sim.generation == x2){
		idp=sim.subpopulations.id;

		z=(length(sim.subpopulations.id)-5);
    	sampVCF2=paste0("p"+ idp[z] +".outputVCFSample(" + num_samples + ", replace=F, outputMultiallelics=T, filePath='" + out_path +"/out_p" + idp[z] + "_gen_" + sim.generation + ".vcf', append= F);");
    	executeLambda(sampVCF2);
	}


	// Sample VCF after 2 gens it was created
	x3=sim.getValue("gen_plus_two");
	if (sim.generation == x3){
		idp=sim.subpopulations.id;
		
		z=(length(sim.subpopulations.id)-1);
    	sampVCF2=paste0("p"+ idp[z] +".outputVCFSample(" + num_samples + ", replace=F, outputMultiallelics=T, filePath='" + out_path +"/out_p" + idp[z] + "_gen_" + sim.generation + ".vcf', append= F);");
    	executeLambda(sampVCF2);
	}

	// kct == gen.deme.was.created + growth.time + 1
	kct = sim.getValue("ini") + tg + 1;

	// if it has not reached the time to create a new deme...
	if (sim.generation <= kct) {

		// get pop ID of the edge deme
		pop = sim.getValue("ppk");

		// calculate new pop size for the edge deme
        newSize = round(SWI(pop).individualCount * er1);
        cat("edge deme: " + pop + "\n");
        cat("NewSize: " + newSize + "\n");
        cat("Current Gen: " + sim.generation + "\n");
        cat("IndividualCount: " + SWI(pop).individualCount + "\n");
        cat("------------------------- \n");

		// if bellow Nmax...
		if (newSize < maxN){

			// change pop size to new size
			SWI(pop).setSubpopulationSize(asInteger(newSize));

		} else {

			// change pop size to carrying capacity (Nmax)
            SWI(pop).setSubpopulationSize(maxN);

			// colors for SLiM GUI
            sim.subpopulations.individuals.color="yellow";
	        sim.subpopulations.individuals[sim.subpopulations.individuals.migrant].color="blue";

		}
	}
}

// kill oldest deme in the expansion (not the core, though)
s7 _other_gens_: {

	// if there are too many demes...
	if (size(asString(sim.subpopulations.id)) > (2*core)){
		// a vector with all pop ids present in the sim
		idpop = sim.subpopulations.id;
	
		// oldest expanding deme will be removed
		// because SLiM is 0-based, using the core size as index does not remove the core, just the next oldest deme...
		// needs to be indexed, since pop.id to kill changes all the time 
        SWI(idpop[core]).setSubpopulationSize(0);
	}

}


// simulation end
s8 _end_sim_ late(){

	// output a VCF of the P1, 100 inds
	SWI(1).outputVCFSample(100, replace=F, outputMultiallelics=T, filePath=asString(out_path + "/out_gen_" + sim.generation + "p1_r" + rep + "re_run_.vcf"), append= F);
	
	// output tree file of sim
	// sim.treeSeqOutput(asString(out_path + "/out_gen_" + sim.generation + "_1D_" + (core) + "_r" + rep + "_final_generation.trees"));
	
	// output memory usage
	sim.outputUsage();
	
	// clock constant
	defineConstant("fim", clock());
	
	// calc duration of sim
	duration = fim - start;
	catn(asString("sim with total duration of " + duration));

	// end simulation
	sim.simulationFinished();
}